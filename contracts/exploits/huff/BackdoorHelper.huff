#define macro MAIN() = takes(0) returns (0) {
    returndatasize             // [0x00]
    calldataload               // [calldata, 0x00]
    0xe0                       // [0xe0, calldata, 0x00]
    shr                        // [func_sig, 0x00]

    0xc0cad421                 // [0xc0cad421, func_sig]
    eq                         // [0/1]
    delegate_approve           // [delegate_approve, 0/1]
    jumpi                      // []

    error:
        0x00 0x00 revert

    delegate_approve:
        0x04
        calldataload            // [spender]
        0x095ea7b3              // [0x095ea7b3, spender] - `approve(address,uint256)` func sig
        returndatasize          // [0x00, 0x095ea7b3, spender]
        mstore                  // [spender]
        msize                   // [0x20, spender]
        mstore                  // []
        0x8AC7230489E80000      // [amount]
        msize                   // [0x40, amount]
        mstore                  // []

        // CALL into asset
        returndatasize         // [0x00] - size of return data
        returndatasize         // [0x00, 0x00] - byte offset in mem where return data is copied
        0x44                   // [0x44, 0x00, 0x00] - size of calldata
        0x1c                   // [0x1c, 0x44, 0x00, 0x00] - byte offset in mem where return data is copied
        returndatasize         // [0x00, 0x1c, 0x44, 0x00, 0x00] - msg.value to send with call
        0x24                   // [0x24, 0x00, 0x1c, 0x44, 0x00, 0x00] - offset in calldata
        calldataload           // [asset, 0x24, 0x00, 0x1c, 0x44, 0x00, 0x00] - calling asset
        gas                    // [gas, asset, 0x24, 0x1c, 0x44, 0x00, 0x00] - gas to send wtih call
        call                   // [success]
        iszero                 // [0/1]
        error                  // [error, 0/1]
        jumpi                  // []
}
