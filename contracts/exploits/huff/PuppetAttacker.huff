// Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Load arguments into mem as we need them

    // Copy `balanceOf(address)` func sig and necessary args into mem to use as calldata for STATICCALL
    0x70a08231         // [0x70a08231] - func sig
    returndatasize     // [0x00, 0x70a08231] 
    mstore             // [] - copied func sig into mem at offset 0x00

    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig

    caller             // [msg.sender]
    msize              // [0x20, msg.sender] - size of active memory
    mstore             // [] - copied msg.sender into mem at offset 0x20


    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender

    address            // [self]
    msize              // [0x40, self]
    mstore             // [] - copied self into mem at offset 0x40

    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self

    0x20               // [0x20] - size code we will copy (address)
    0xe0               // [0xe0, 0x20] - value used to calculate offset in code to copy from 
    codesize           // [codesize, 0xe0, 0x20] - size of code from current environment
    sub                // [offset, 0x20] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 1st arg is)
    msize              // [0x60, offset, 0x20] - byte offset in memory where code will be copied to 
    codecopy           // [] - consumes 3 items off stack. Copies specified code to specified memory location

    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  000000000000000000000000274b028b03A250cA03644E6c578D81f019eE1323 -> token

    // STATICCALL into token
    0x60               // [0x60] - byte offset in mem
    mload              // [token] - copied token onto stack from byte offset 0x60 in mem
    0x20               // [0x20, token] - size of return data
    0x60               // [0x60, 0x20, token] - byte offset in mem where return data is copied
    0x24               // [0x24, 0x60, 0x20, token] - size of calldata
    0x1c               // [0x1c, 0x24, 0x60, 0x20, token] - byte offset in mem where return data is copied
    dup5               // [token, 0x1c, 0x24, 0x60, 0x20, token] - calling token
    gas                // [gas, token, 0x1c, 0x24, 0x60, 0x20, token] - gas to send with staticcall (gasleft())
    staticcall         // [success, token]
    iszero             // [0/1, token]
    throw_error        // [throw_error, 0/1, token]
    jumpi              // [token]

    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    
    // Copy `permit(...)` func sig and necessary args to use as calldata for CALL
    0xd505accf         // [0xd505accf, token] - func sig
    0x00               // [0x00, 0xd505accf, token] - byte offset in mem
    mstore             // [token] - copied func sig into mem at offset 0x00

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000d505accf -> `permit(...)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender

    0x20               // [0x20, token] - size code we will copy (uint256)
    0x80               // [0x80, 0x20, token] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x80, 0x20, token] - size of code from current environment
    sub                // [offset, 0x20, token] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 4th arg is)
    msize              // [0x80, offset, 0x20, token] - byte offset in memory where code will be copied to 
    codecopy           // [token] - consumes 3 items off stack. Copies specified code to specified memory location

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000d505accf -> `permit(...)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)

    0x20               // [0x20, token] - size code we will copy (uint256)
    0x60               // [0x60, 0x20, token] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x60, 0x20, token] - size of code from current environment
    sub                // [offset, 0x20, token] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 5th arg is)
    msize              // [0xa0, offset, 0x20, token] - byte offset in memory where code will be copied to 
    codecopy           // [token] - consumes 3 items off stack. Copies specified code to specified memory location

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000d505accf -> `permit(...)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)

    0x20               // [0x20, token] - size code we will copy (uint256)
    0x40               // [0x40, 0x20, token] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x40, 0x20, token] - size of code from current environment
    sub                // [offset, 0x20, token] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 6th arg is)
    msize              // [0xc0, offset, 0x20, token] - byte offset in memory where code will be copied to 
    codecopy           // [token] - consumes 3 items off stack. Copies specified code to specified memory location

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000d505accf -> `permit(...)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)

    0x20               // [0x20, token] - size code we will copy (uint256)
    dup1               // [0x20, 0x20, token] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0x20, 0x20, token] - size of code from current environment
    sub                // [offset, 0x20, token] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 7th arg is)
    msize              // [0xe0, offset, 0x20, token] - byte offset in memory where code will be copied to 
    codecopy           // [token] - consumes 3 items off stack. Copies specified code to specified memory location

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000d505accf -> `permit(...)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // CALL into token
    0x00               // [0x00, token] - size of return data
    dup1               // [0x00, 0x00, token] - byte offset in mem where return data is copied
    0xe4               // [0xe4, 0x00, 0x00, token] - size of calldata (228 bytes)
    0x1c               // [0x1c, 0xe4, 0x00, 0x00, token] - byte offset in mem where calldata starts
    dup3               // [0x00, 0x1c, 0xe4, 0x00, 0x00, token] - msg.value to send with call
    dup6               // [token, 0x00, 0x1c, 0xe4, 0x00, 0x00, token] - calling token
    gas                // [gas, token, 0x00, 0x1c, 0xe4, 0x00, 0x00, token] - gas to send with call (gasleft())
    call               // [success, token]
    iszero             // [0/1, token]
    throw_error        // [throw_error, 0/1, token]
    jumpi              // [token]

    // Copy `transferFrom(address,address,uint256)` func sig into mem to use as caldata for CALL
    0x23b872dd         // [0x23b872dd, token] - func sig
    0x00               // [0x00, 0x23b872dd, token] - byte offset in mem
    mstore             // [token] - copied func sig into mem at offset 0x00

    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000023b872dd -> `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x20]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // CALL into token
    0x00               // [0x00, token] - size of return data
    dup1               // [0x00, 0x00, token] - byte offset in mem where return data is copied
    0x64               // [0x64, 0x00, 0x00, token] - size of calldata (228 bytes)
    0x1c               // [0x1c, 0x64, 0x00, 0x00, token] - byte offset in mem where calldata starts
    dup3               // [0x00, 0x1c, 0x64, 0x00, 0x00, token] - msg.value to send with call
    dup6               // [token, 0x00, 0x1c, 0x64, 0x00, 0x00, token] - calling token
    gas                // [gas, token, 0x00, 0x1c, 0x64, 0x00, 0x00, token] - gas to send with call (gasleft())
    call               // [success, token]
    iszero              // [0/1, token]
    throw_error        // [throw_error, 0/1, token]
    jumpi              // [token]

    // Copy `balanceOf(address)` into mem to use as calldata for STATICCALL
    0x70a08231         // [0x70a08231, token] - func sig
    0x20               // [0x20, 0x70a08231, token] - byte offset in mem
    mstore             // [token] - copied func sig into mem at offset 0x20

    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000023b872dd -> `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0x40]  0000000000000000000000006B63B0441371ddFbD65A65Ef27642e7A622f29dD -> self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // STATICCALL into token
    0x20               // [0x20, token] - size of return data
    0x40               // [0x40, 0x20, token] - byte offset in mem where return data is copied
    0x24               // [0x24, 0x40, 0x20, token] - size of calldata
    0x3c               // [0x3c, 0x24, 0x40, 0x20, token] - byte offset in mem where return data is copied
    dup5               // [token, 0x3c, 0x24, 0x40, 0x20, token] - calling token
    gas                // [gas, token, 0x3c, 0x24, 0x40, 0x20, token] - gas to send with staticcall (gasleft())
    staticcall         // [success, token]
    iszero             // [0/1, token]
    throw_error        // [throw_error, 0/1, token]
    jumpi              // [token]

    // MEMORY:
    // [OFFSET 0x00]  0000000000000000000000000000000000000000000000000000000023b872dd -> `transferFrom(address,address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // Copy `approve(address,uint256)` exchange arg into mem to use as calldata for CALL
    0x095ea7b3         // [0x095ea7b3, token] - func sig
    0x00               // [0x00, 0x095ea7b3, token] - func offset in mem
    mstore             // [token] - copied func sig into mem at offset 0x00

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    0x20               // [0x20, token] - size code we will copy (address)
    0xc0               // [0xc0, 0x20, token] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0xc0, 0x20, token] - size of code from current environment
    sub                // [offset, 0x20, token] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 2nd arg is)
    dup2               // [0x20, offset, 0x20, token] - byte offset in memory where code will be copied to 
    codecopy           // [token] - consumes 3 items off stack. Copies specified code to specified memory location

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  000000000000000000000000b951b01D0191705000d0cdE88EBb27Dd9b9F7365 -> exchange (address)
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000000000001c -> v (uint8)
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // CALL into token
    0x00               // [0x00, token] - size of return data
    dup1               // [0x00, 0x00, token] - byte offset in mem where return data is copied
    0x44               // [0x44, 0x00, 0x00, token] - size of calldata (228 bytes)
    0x1c               // [0x1c, 0x44, 0x00, 0x00, token] - byte offset in mem where calldata starts
    dup3               // [0x00, 0x1c, 0x44, 0x00, 0x00, token] - msg.value to send with call
    dup6               // [token, 0x00, 0x1c, 0x44, 0x00, 0x00, token] - calling token
    gas                // [gas, token, 0x00, 0x1c, 0x44, 0x00, 0x00, token] - gas to send with call (gasleft())
    call               // [success, token]
    iszero              // [0/1, token]
    throw_error        // [throw_error, 0/1, token]
    jumpi              // [token]

    // Copy `balanceOf(address)` func sig and pool into mem to use as calldata for STATICCALL
    0x70a08231         // [0x70a08231, token] - func sig
    0xa0               // [0xa0, 0x70a08231, token] - byte offset in mem
    mstore             // [token] - copied func sig into mem at offset 0xa0

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  000000000000000000000000b951b01D0191705000d0cdE88EBb27Dd9b9F7365 -> exchange (address)
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0xc0]  2500318289916f0ade0cf7283944d37d8e0a18783032ce13d98dd20023396e2d -> r (bytes32)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    0x20               // [0x20, token] - size code we will copy (address)
    0xa0               // [0xa0, 0x20, token] - value used to calculate offset in code to copy from
    codesize           // [codesize, 0xa0, 0x20, token] - size of code from current environment
    sub                // [offset, 0x20, token] - consumes top two items and subtracts item 1 from item 2. Result is the offset in code to copy from (where 3rd arg is)
    0xc0               // [0xc0, offset, 0x20, token] - byte offset in memory where code will be copied to 
    codecopy           // [token] - consumes 3 items off stack. Copies specified code to specified memory location
    
    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  000000000000000000000000b951b01D0191705000d0cdE88EBb27Dd9b9F7365 -> exchange (address)
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0xc0]  0000000000000000000000002f2254751532C5b08bD0c9e230322774697C036E -> pool (address)
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    0xc0               // [0xc0, token] - byte offset in mem
    mload              // [pool, token] - copied pool onto stack for future CALLs

    // STATICCALL into token
    0x20               // [0x20, pool, token] - size of return data
    0xc0               // [0xc0, 0x20, pool, token] - byte offset in mem where return data is copied
    0x24               // [0x24, 0xc0, 0x20, pool, token] - size of calldata
    0xbc               // [0xbc, 0x24, 0xc0, 0x20, pool, token] - byte offset in mem where caldata starts
    dup6               // [token, 0xbc, 0x24, 0xc0, 0x20, pool, token] - calling token
    gas                // [gas, token, 0xbc, 0x24, 0xc0, 0x20, pool, token] - gas to send with staticcall (gasleft())
    staticcall         // [success, pool, token]
    iszero             // [0/1, pool, token]
    throw_error        // [throw_error, 0/1, pool, token]
    jumpi              // [pool, token]

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  000000000000000000000000b951b01D0191705000d0cdE88EBb27Dd9b9F7365 -> exchange (address)
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0xc0]  00000000000000000000000000000000000000000000152D02C7E14AF6800000 -> pool balance
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // Copy exchange onto stack and `tokenToEthSwapInput(uint256,uint256,uint256)` func sig into mem to use as calldata for CALL
    0x20                // [0x20, pool, token] - byte offset in mem
    mload               // [exchange, pool, token] - copied exchange onto stack from mem

    0x95e3c50b          // [0x95e3c50b, exchange, pool, token]  - func sig
    0x20                // [0x20, 0x95e3c50b, exchange, pool, token] - byte offset in mem
    mstore              // [exchange, pool, token] - copied func sig into mem at offset 0x20

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000095e3c50b -> `tokenToEthSwapInput(uint256,uint256,uint256)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of msg.sender
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0xc0]  00000000000000000000000000000000000000000000152D02C7E14AF6800000 -> pool balance
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    0x01                // [0x01, exchange, pool, token] - 2nd param in swap func
    0x60                // [0x60, 0x01, exchange, pool, token] - byte offset in mem
    mstore              // [exchange, pool, token] - copied 0x01 into mem at offset 0x60

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000095e3c50b -> `tokenToEthSwapInput(uint256,uint256,uint256)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  0000000000000000000000000000000000000000000000000000000000000001 -> 2nd param in swap func (uint256)
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  0000000000000000000000000000000000000000000000000000000070a08231 -> `balanceOf(address)` func sig
    // [OFFSET 0xc0]  00000000000000000000000000000000000000000000152D02C7E14AF6800000 -> pool balance
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // CALL into exchange
    0x00               // [0x00, exchange, pool, token] - size of return data
    dup1               // [0x00, 0x00, exchange, pool, token] - byte offset in mem where return data is copied
    0x64               // [0x64, 0x00, 0x00, exchange, pool, token] - size of calldata
    0x3c               // [0x3c, 0x64, 0x00, 0x00, exchange, pool, token] - byte offset in mem where calldata starts
    dup3               // [0x00, 0x3c, 0x64, 0x00, 0x00, exchange, pool, token] - msg.value to send with call
    dup6               // [exchange, 0x00, 0x3c, 0x64, 0x00, 0x00, exchange, pool, token] - calling exchange
    gas                // [gas, exchange, 0x00, 0x3c, 0x64, 0x00, 0x00, exchange, pool, token] - gas to send with call (gasleft())
    call               // [success, exchange, pool, token]
    iszero             // [0/1, exchange, pool, token]
    throw_error        // [throw_error, 0/1, exchange, pool, token]
    jumpi              // [exchange, pool, token]

    // Copy `calculateDepositRequired(uint256)` func sig into mem to use as calldata for STATICCALL
    0xbc554c28         // [0xbc554c28, exchange, pool, token] - func sig
    0xa0               // [0xa0, 0xbc554c28, exchange, pool, token] - byte offset in mem
    mstore             // [exchange, pool, token] - copied func sig into mem at offset 0xa0
    
    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000095e3c50b -> `tokenToEthSwapInput(uint256,uint256,uint256)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  0000000000000000000000000000000000000000000000000000000000000001 -> 2nd param in swap func (uint256)
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000000000000C7DA29D4 -> deadline (uint256)
    // [OFFSET 0xa0]  00000000000000000000000000000000000000000000000000000000bc554c28 -> `calculateDepositRequired(uint256)` func sig  
    // [OFFSET 0xc0]  00000000000000000000000000000000000000000000152D02C7E14AF6800000 -> pool balance
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // STATICCALL into pool 
    0x20               // [0x20, exchange, pool, token] - size of return data
    0x80               // [0x80, 0x20, exchange, pool, token] - byte offset in mem where return data is copied
    0x24               // [0x24, 0x80, 0x20, exchange, pool, token] - size of calldata
    0xbc               // [0xbc, 0x24, 0x80, 0x20, exchange, pool, token] - byte offset in mem where caldata starts
    dup6               // [pool, 0xbc, 0x24, 0x80, 0x20, exchange, pool, token] - calling pool
    gas                // [gas, pool, 0xbc, 0x24, 0x80, 0x20, exchange, pool, token] - gas to send with staticcall (gasleft())
    staticcall         // [success, exchange, pool, token]
    iszero             // [0/1, exchange, pool, token]
    throw_error        // [throw_error, 0/1, exchange, pool, token]
    jumpi              // [exchange, pool, token]

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000095e3c50b -> `tokenToEthSwapInput(uint256,uint256,uint256)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  0000000000000000000000000000000000000000000000000000000000000001 -> 2nd param in swap func (uint256)
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000110e5bbd907e9d0c0 -> returndata (uint256) - eth_required
    // [OFFSET 0xa0]  00000000000000000000000000000000000000000000000000000000bc554c28 -> `calculateDepositRequired(uint256)` func sig  
    // [OFFSET 0xc0]  00000000000000000000000000000000000000000000152D02C7E14AF6800000 -> pool balance
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    // Copy `borrow(uint256,address)` func sig and caller into mem to use as calldata for CALL
    0x4b3fd148         // [0x4b3fd148, exchange, pool, token] - func sig
    0xa0               // [0xa0, 0x4b3fd148, exchange, pool, token] - byte offset in mem
    mstore             // [exchange, pool, token] - copied func sig into mem at offset 0xa0

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000095e3c50b -> `tokenToEthSwapInput(uint256,uint256,uint256)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  0000000000000000000000000000000000000000000000000000000000000001 -> 2nd param in swap func (uint256)
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000110e5bbd907e9d0c0 -> returndata (uint256) - eth_required
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000004b3fd148 -> `borrow(uint256,address)` func sig  
    // [OFFSET 0xc0]  00000000000000000000000000000000000000000000152D02C7E14AF6800000 -> pool balance
    // [OFFSET 0xe0]  1d29bf773fbf1fa5cd957e31a7962c444dbb8da5ab7e1d2091a614baa9ba75b4 -> s (bytes32)

    caller             // [caller, exchange, pool, token] - msg.sender
    0xe0               // [0xe0, caller, exchange, pool, token] - byte offset in mem
    mstore             // [exchange, pool, token] - copied msg.sender into mem at offset 0xe0

    // MEMORY:
    // [OFFSET 0x00]  00000000000000000000000000000000000000000000000000000000095ea7b3 -> `approve(address,uint256)` func sig
    // [OFFSET 0x20]  0000000000000000000000000000000000000000000000000000000095e3c50b -> `tokenToEthSwapInput(uint256,uint256,uint256)` func sig
    // [OFFSET 0x40]  00000000000000000000000000000000000000000000003635C9ADC5DEA00000 -> return data (uint256) - balance of self
    // [OFFSET 0x60]  0000000000000000000000000000000000000000000000000000000000000001 -> 2nd param in swap func (uint256)
    // [OFFSET 0x80]  00000000000000000000000000000000000000000000000110e5bbd907e9d0c0 -> returndata (uint256) - eth_required
    // [OFFSET 0xa0]  000000000000000000000000000000000000000000000000000000004b3fd148 -> `borrow(uint256,address)` func sig  
    // [OFFSET 0xc0]  00000000000000000000000000000000000000000000152D02C7E14AF6800000 -> pool balance
    // [OFFSET 0xe0]  000000000000000000000000c89D42189f0450C2b2c3c61f58Ec5d628176A1E7 -> msg.sender

    // CALL into pool
    0x00               // [0x00, exchange, pool, token] - size of return data
    dup1               // [0x00, 0x00, exchange, pool, token] - byte offset in mem where return data is copied
    0x44               // [0x44, 0x00, 0x00, exchange, pool, token] - size of calldata
    0xbc               // [0xbc, 0x44, 0x00, 0x00, exchange, pool, token] - byte offset in mem where calldata starts
    0x80               // [0x80, 0xbc, 0x44, 0x00, 0x00, exchange, pool, token] - byte offset in mem
    mload              // [eth_required, 0xbc, 0x44, 0x00, 0x00, exchange, pool, token] - msg.value to send with call
    dup7               // [pool, eth_required, 0xbc, 0x44, 0x00, 0x00, exchange, pool, token] - calling pool
    gas                // [gas, pool, eth_required, 0xbc, 0x44, 0x00, 0x00, exchange, pool, token] - gas to send with call (gasleft())
    call               // [success, exchange, pool, token]
    iszero             // [0/1, exchange, pool, token]
    throw_error        // [throw_error, 0/1, exchange, pool, token]
    jumpi              // [exchange, pool, token]

    // CALL msg.sender (send leftover selfbalance)
    0x00               // [0x00, exchange, pool, token] - size of return data
    dup1               // [0x00, 0x00, exchange, pool, token] - byte offset in mem where return data is copied
    dup1               // [0x00, 0x00, 0x00, exchange, pool, token] - size of calldata
    dup1               // [0x00, 0x00, 0x00, 0x00, exchange, pool, token] - byte offset in mem where calldata starts
    selfbalance        // [self_bal, 0x00, 0x00, 0x00, 0x00, exchange, pool, token] - msg.value to send with call
    caller             // [caller, self_bal, 0x00, 0x00, 0x00, 0x00, exchange, pool, token] - calling msg.sender
    gas                // [gas, caller, self_bal, 0x00, 0x00, 0x00, 0x00, exchange, pool, token] - gas to send with call (gasleft())
    call               // [success, exchange, pool, token]
    iszero             // [0/1, exchange, pool, token]
    throw_error        // [throw_error, 0/1, exchange, pool, token]
    jumpi              // [exchange, pool, token]
    pop                // [pool, token]
    pop                // [pool]
    pop                // [token]
    
    stop

    throw_error:
        0x00 0x00 revert
}

#define macro MAIN() = takes (0) returns (0) {}
